// Code generated by ydbgen; DO NOT EDIT.

package main

import (
	"strconv"

	"github.com/ydb-platform/ydb-go-sdk/v3"
	"github.com/ydb-platform/ydb-go-sdk/v3/table"
)

var (
	_ = strconv.Itoa
	_ = ydb.StringValue
	_ = table.NewQueryParameters
)

func (s *Series) Scan(res *table.Result) (err error) {
	res.ScanWithDefaults(&s.ID, &s.Title, &s.Info, &s.ReleaseDate, &s.Views)
	return res.Err()
}

func (s *Series) StructValue() ydb.Value {
	var v0 ydb.Value
	{
		var v1 ydb.Value
		{
			vp0 := ydb.OptionalValue(ydb.Uint64Value(s.ID))
			v1 = vp0
		}
		var v2 ydb.Value
		{
			vp0 := ydb.OptionalValue(ydb.UTF8Value(s.Title))
			v2 = vp0
		}
		var v3 ydb.Value
		{
			vp0 := ydb.OptionalValue(ydb.UTF8Value(s.Info))
			v3 = vp0
		}
		var v4 ydb.Value
		{
			var v5 ydb.Value
			ok0 := !s.ReleaseDate.IsZero()
			if ok0 {
				v5 = ydb.OptionalValue(ydb.DatetimeValueFromTime(s.ReleaseDate))
			} else {
				v5 = ydb.NullValue(ydb.TypeDatetime)
			}
			v4 = v5
		}
		var v5 ydb.Value
		{
			vp0 := ydb.OptionalValue(ydb.Uint64Value(s.Views))
			v5 = vp0
		}
		v0 = ydb.StructValue(
			ydb.StructFieldValue("series_id", v1),
			ydb.StructFieldValue("title", v2),
			ydb.StructFieldValue("series_info", v3),
			ydb.StructFieldValue("release_date", v4),
			ydb.StructFieldValue("views", v5),
		)
	}
	return v0
}

func (ss *SeriesList) Scan(res *table.Result) (err error) {
	for res.NextRow() {
		var s Series
		res.ScanWithDefaults(&s.ID, &s.Title, &s.Info, &s.ReleaseDate, &s.Views)
		if res.Err() != nil {
			return res.Err()
		}
		*ss = append(*ss, s)
	}
	return res.Err()
}

func (ss SeriesList) ListValue() ydb.Value {
	var list0 ydb.Value
	vs0 := make([]ydb.Value, len(ss))
	for i0, item0 := range ss {
		var v0 ydb.Value
		{
			var v1 ydb.Value
			{
				var v2 ydb.Value
				{
					vp0 := ydb.OptionalValue(ydb.Uint64Value(item0.ID))
					v2 = vp0
				}
				var v3 ydb.Value
				{
					vp0 := ydb.OptionalValue(ydb.UTF8Value(item0.Title))
					v3 = vp0
				}
				var v4 ydb.Value
				{
					vp0 := ydb.OptionalValue(ydb.UTF8Value(item0.Info))
					v4 = vp0
				}
				var v5 ydb.Value
				{
					var v6 ydb.Value
					ok0 := !item0.ReleaseDate.IsZero()
					if ok0 {
						v6 = ydb.OptionalValue(ydb.DatetimeValueFromTime(item0.ReleaseDate))
					} else {
						v6 = ydb.NullValue(ydb.TypeDatetime)
					}
					v5 = v6
				}
				var v6 ydb.Value
				{
					vp0 := ydb.OptionalValue(ydb.Uint64Value(item0.Views))
					v6 = vp0
				}
				v1 = ydb.StructValue(
					ydb.StructFieldValue("series_id", v2),
					ydb.StructFieldValue("title", v3),
					ydb.StructFieldValue("series_info", v4),
					ydb.StructFieldValue("release_date", v5),
					ydb.StructFieldValue("views", v6),
				)
			}
			v0 = v1
		}
		vs0[i0] = v0
	}
	if len(vs0) == 0 {
		var t1 ydb.Type
		{
			var t2 ydb.Type
			{
				fs0 := make([]ydb.StructOption, 5)
				var t3 ydb.Type
				{
					tp0 := ydb.TypeUint64
					t3 = ydb.Optional(tp0)
				}
				fs0[0] = ydb.StructField("series_id", t3)
				var t4 ydb.Type
				{
					tp0 := ydb.TypeUTF8
					t4 = ydb.Optional(tp0)
				}
				fs0[1] = ydb.StructField("title", t4)
				var t5 ydb.Type
				{
					tp0 := ydb.TypeUTF8
					t5 = ydb.Optional(tp0)
				}
				fs0[2] = ydb.StructField("series_info", t5)
				var t6 ydb.Type
				{
					tp0 := ydb.TypeDatetime
					t6 = ydb.Optional(tp0)
				}
				fs0[3] = ydb.StructField("release_date", t6)
				var t7 ydb.Type
				{
					tp0 := ydb.TypeUint64
					t7 = ydb.Optional(tp0)
				}
				fs0[4] = ydb.StructField("views", t7)
				t2 = ydb.Struct(fs0...)
			}
			t1 = t2
		}
		t0 := ydb.List(t1)
		list0 = ydb.ZeroValue(t0)
	} else {
		list0 = ydb.ListValue(vs0...)
	}
	return list0
}
